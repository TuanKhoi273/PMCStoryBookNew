{"ast":null,"code":"import getTokenTypeByToken from\"./getTokenTypeByToken\";import flattenInlineTokens from\"./flattenInlineTokens\";import renderInlineAsText from\"./renderInlineAsText\";export function cleanupTokens(tokens){tokens=flattenInlineTokens(tokens);tokens.forEach(function(token){token.type=getTokenTypeByToken(token);if(token.type==='image'||token.type==='hardbreak'){token.block=true;}if(token.type==='image'){token.attrs[token.attrIndex('alt')][1]=renderInlineAsText(token.children);}});var stack=[];tokens=tokens.reduce(function(acc,token,index){if(token.type==='link'&&token.nesting===1){stack.push(token);}else if(stack.length>0&&token.type==='link'&&token.nesting===-1){if(stack.some(function(stackToken){return stackToken.block;})){stack[0].type='blocklink';stack[0].block=true;token.type='blocklink';token.block=true;}stack.push(token);while(stack.length){acc.push(stack.shift());}}else if(stack.length>0){stack.push(token);}else{acc.push(token);}return acc;},[]);return tokens;}","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/PMCStoryBookNew/node_modules/react-native-markdown-display/src/lib/util/cleanupTokens.js"],"names":["getTokenTypeByToken","flattenInlineTokens","renderInlineAsText","cleanupTokens","tokens","forEach","token","type","block","attrs","attrIndex","children","stack","reduce","acc","index","nesting","push","length","some","stackToken","shift"],"mappings":"AAAA,MAAOA,CAAAA,mBAAP,6BACA,MAAOC,CAAAA,mBAAP,6BACA,MAAOC,CAAAA,kBAAP,4BAEA,MAAO,SAASC,CAAAA,aAAT,CAAuBC,MAAvB,CAA+B,CACpCA,MAAM,CAAGH,mBAAmB,CAACG,MAAD,CAA5B,CACAA,MAAM,CAACC,OAAP,CAAe,SAACC,KAAD,CAAW,CACxBA,KAAK,CAACC,IAAN,CAAaP,mBAAmB,CAACM,KAAD,CAAhC,CAGA,GAAIA,KAAK,CAACC,IAAN,GAAe,OAAf,EAA0BD,KAAK,CAACC,IAAN,GAAe,WAA7C,CAA0D,CACxDD,KAAK,CAACE,KAAN,CAAc,IAAd,CACD,CAGD,GAAIF,KAAK,CAACC,IAAN,GAAe,OAAnB,CAA4B,CAC1BD,KAAK,CAACG,KAAN,CAAYH,KAAK,CAACI,SAAN,CAAgB,KAAhB,CAAZ,EAAoC,CAApC,EAAyCR,kBAAkB,CACzDI,KAAK,CAACK,QADmD,CAA3D,CAGD,CACF,CAdD,EAoBA,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACAR,MAAM,CAAGA,MAAM,CAACS,MAAP,CAAc,SAACC,GAAD,CAAMR,KAAN,CAAaS,KAAb,CAAuB,CAC5C,GAAIT,KAAK,CAACC,IAAN,GAAe,MAAf,EAAyBD,KAAK,CAACU,OAAN,GAAkB,CAA/C,CAAkD,CAChDJ,KAAK,CAACK,IAAN,CAAWX,KAAX,EACD,CAFD,IAEO,IACLM,KAAK,CAACM,MAAN,CAAe,CAAf,EACAZ,KAAK,CAACC,IAAN,GAAe,MADf,EAEAD,KAAK,CAACU,OAAN,GAAkB,CAAC,CAHd,CAIL,CACA,GAAIJ,KAAK,CAACO,IAAN,CAAW,SAACC,UAAD,QAAgBA,CAAAA,UAAU,CAACZ,KAA3B,EAAX,CAAJ,CAAkD,CAChDI,KAAK,CAAC,CAAD,CAAL,CAASL,IAAT,CAAgB,WAAhB,CACAK,KAAK,CAAC,CAAD,CAAL,CAASJ,KAAT,CAAiB,IAAjB,CACAF,KAAK,CAACC,IAAN,CAAa,WAAb,CACAD,KAAK,CAACE,KAAN,CAAc,IAAd,CACD,CAEDI,KAAK,CAACK,IAAN,CAAWX,KAAX,EAEA,MAAOM,KAAK,CAACM,MAAb,CAAqB,CACnBJ,GAAG,CAACG,IAAJ,CAASL,KAAK,CAACS,KAAN,EAAT,EACD,CACF,CAjBM,IAiBA,IAAIT,KAAK,CAACM,MAAN,CAAe,CAAnB,CAAsB,CAC3BN,KAAK,CAACK,IAAN,CAAWX,KAAX,EACD,CAFM,IAEA,CACLQ,GAAG,CAACG,IAAJ,CAASX,KAAT,EACD,CAED,MAAOQ,CAAAA,GAAP,CACD,CA3BQ,CA2BN,EA3BM,CAAT,CA6BA,MAAOV,CAAAA,MAAP,CACD","sourcesContent":["import getTokenTypeByToken from './getTokenTypeByToken';\nimport flattenInlineTokens from './flattenInlineTokens';\nimport renderInlineAsText from './renderInlineAsText';\n\nexport function cleanupTokens(tokens) {\n  tokens = flattenInlineTokens(tokens);\n  tokens.forEach((token) => {\n    token.type = getTokenTypeByToken(token);\n\n    // set image and hardbreak to block elements\n    if (token.type === 'image' || token.type === 'hardbreak') {\n      token.block = true;\n    }\n\n    // Set img alt text\n    if (token.type === 'image') {\n      token.attrs[token.attrIndex('alt')][1] = renderInlineAsText(\n        token.children,\n      );\n    }\n  });\n\n  /**\n   * changing a link token to a blocklink to fix issue where link tokens with\n   * nested non text tokens breaks component\n   */\n  const stack = [];\n  tokens = tokens.reduce((acc, token, index) => {\n    if (token.type === 'link' && token.nesting === 1) {\n      stack.push(token);\n    } else if (\n      stack.length > 0 &&\n      token.type === 'link' &&\n      token.nesting === -1\n    ) {\n      if (stack.some((stackToken) => stackToken.block)) {\n        stack[0].type = 'blocklink';\n        stack[0].block = true;\n        token.type = 'blocklink';\n        token.block = true;\n      }\n\n      stack.push(token);\n\n      while (stack.length) {\n        acc.push(stack.shift());\n      }\n    } else if (stack.length > 0) {\n      stack.push(token);\n    } else {\n      acc.push(token);\n    }\n\n    return acc;\n  }, []);\n\n  return tokens;\n}\n"]},"metadata":{},"sourceType":"module"}