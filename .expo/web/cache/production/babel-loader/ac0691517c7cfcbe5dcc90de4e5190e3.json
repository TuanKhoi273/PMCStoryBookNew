{"ast":null,"code":"import tokensToAST from\"./util/tokensToAST\";import{stringToTokens}from\"./util/stringToTokens\";import{cleanupTokens}from\"./util/cleanupTokens\";import groupTextTokens from\"./util/groupTextTokens\";import omitListItemParagraph from\"./util/omitListItemParagraph\";export default function parser(source,renderer,markdownIt){if(Array.isArray(source)){return renderer(source);}var tokens=stringToTokens(source,markdownIt);tokens=cleanupTokens(tokens);tokens=groupTextTokens(tokens);tokens=omitListItemParagraph(tokens);var astTree=tokensToAST(tokens);return renderer(astTree);}","map":{"version":3,"sources":["/Users/admin/Documents/GitHub/PMCStoryBookNew/node_modules/react-native-markdown-display/src/lib/parser.js"],"names":["tokensToAST","stringToTokens","cleanupTokens","groupTextTokens","omitListItemParagraph","parser","source","renderer","markdownIt","Array","isArray","tokens","astTree"],"mappings":"AAAA,MAAOA,CAAAA,WAAP,0BACA,OAAQC,cAAR,6BACA,OAAQC,aAAR,4BACA,MAAOC,CAAAA,eAAP,8BACA,MAAOC,CAAAA,qBAAP,oCASA,cAAe,SAASC,CAAAA,MAAT,CAAgBC,MAAhB,CAAwBC,QAAxB,CAAkCC,UAAlC,CAA8C,CAC3D,GAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,CAA2B,CACzB,MAAOC,CAAAA,QAAQ,CAACD,MAAD,CAAf,CACD,CAED,GAAIK,CAAAA,MAAM,CAAGV,cAAc,CAACK,MAAD,CAASE,UAAT,CAA3B,CACAG,MAAM,CAAGT,aAAa,CAACS,MAAD,CAAtB,CACAA,MAAM,CAAGR,eAAe,CAACQ,MAAD,CAAxB,CACAA,MAAM,CAAGP,qBAAqB,CAACO,MAAD,CAA9B,CAEA,GAAMC,CAAAA,OAAO,CAAGZ,WAAW,CAACW,MAAD,CAA3B,CAEA,MAAOJ,CAAAA,QAAQ,CAACK,OAAD,CAAf,CACD","sourcesContent":["import tokensToAST from './util/tokensToAST';\nimport {stringToTokens} from './util/stringToTokens';\nimport {cleanupTokens} from './util/cleanupTokens';\nimport groupTextTokens from './util/groupTextTokens';\nimport omitListItemParagraph from './util/omitListItemParagraph';\n\n/**\n *\n * @param {string} source\n * @param {function} [renderer]\n * @param {AstRenderer} [markdownIt]\n * @return {View}\n */\nexport default function parser(source, renderer, markdownIt) {\n  if (Array.isArray(source)) {\n    return renderer(source);\n  }\n\n  let tokens = stringToTokens(source, markdownIt);\n  tokens = cleanupTokens(tokens);\n  tokens = groupTextTokens(tokens);\n  tokens = omitListItemParagraph(tokens);\n\n  const astTree = tokensToAST(tokens);\n\n  return renderer(astTree);\n}\n"]},"metadata":{},"sourceType":"module"}